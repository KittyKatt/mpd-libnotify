#!/bin/bash
#
# pbrisbin 2010
#
# http://pbrisbin.com:8080/bin/bashnotify
#
# modify the config after it's written!
#
# modified by KittyKatt (kittykatt@archlinux.us)
#                       (http://www.silverirc.com/kittykatt/) 2010
#
###

### utilities {{{
message() { echo 'usage: mpdnotify [start|stop|restart]'; exit 1; }

logger() { echo "$(date +'[ %d %b %Y %H:%M ]') :: $*" | tee -a "$log"; }

errorout() { logger "error: $*"; exit 1; }

# }}}

### write config file {{{
write_config() {
  if [ ! -f "$config" ]; then

    logger "NOTE: writing example config to $config..."
    logger "you should edit this file before starting the deamon"

    cat > "$config" << EOF
#!/bin/bash
#
# mpdnotify config - any valid bash is allowed, you
# only need to define handle_event() for the deamon
# to run properly
#
# \$mydir exists, and it's value is $mydir
#
###

###
#
# the actual handle_event() definition
#
# this is the only requirement for a valid config
#
###

fetch_cover () {
  album=\$(mpc --format "%album%" | head -1)
  # do we have a valid album name
  file="\$coverDir/\$album"
  # Does the covers directory exist? Make it if it does not.
  if [ ! -d "\$coverDir" ]; then mkdir -p "\${coverDir}"; fi
  # have we not fetched this already
  if [ ! -f "\$file" ] ; then
    echo -n "\$file is not in covers... "
    echo "\${album// /+}"
    url="http://www.albumart.org/index.php?srchkey=\${album// /+}&itempage=1&newsearch=1&searchindex=Music"
    cover_url=\$(curl -s "\$url" | awk -F 'src=' '/zoom-icon.jpg/ {print \$2}' | cut -d '"' -f 2 | head -n1)
    # is it available
    if [ -n "\$cover_url" ]; then
      echo retrieved
      wget -q -O "\$file" "\$cover_url"
    else
      echo NOT available 
    fi
  fi
}

handle_event() {
  showCover="true"
  expireTime="1500" # in milliseconds
  coverDir="\$HOME/.covers/"
  tmpCover="/tmp/cover"
  baseCover="/usr/share/mpd-libnotify/extras/base.png"
  topCover="/usr/share/mpd-libnotify/extras/top.png"
  noCover="/usr/share/mpd-libnotify/extras/NOCOVER.png"
  mpdPID=\$(pidof mpd)
  mpcArtist="Could not find Artist's name"
  mpcTitle="Could not find Song's title"
  mpcAlbum="Could not find Album's name"
  mpcLength="Could not find Song's length"

  if [[ -z \$mpdPID ]]; then
    echo "MPD is not currently running!"
    exit
  else
    mpcAlbum=\$(mpc --format '%album%' | head -1)
    mpcArtist=\$(mpc --format '%artist%' | head -1)
    mpcTitle=\$(mpc --format '%title%' | head -1)
    mpcLength=\$(mpc --format '%time%' | head -1)
    if [ "\$showCover" = "true" ]; then
      if [ -f "\${tmpCover}" ]; then rm "\${tmpCover}"; fi
      if [ -f "\$coverDir/\$mpcAlbum" ]; then
        cp "\$coverDir/\$mpcAlbum" "\${tmpCover}"
      else
        fetch_cover
        if [ -f "\$coverDir/\$mpcAlbum" ]; then
          cp "\$coverDir/\$mpcAlbum" "\${tmpCover}"
        else
          cp "\$noCover" "\${tmpCover}"
        fi
      fi
      mogrify -resize 65x65! \$tmpCover
      convert \$baseCover "\$tmpCover" -geometry +4+3 -composite \$topCover -geometry +0+0 -composite "\$tmpCover"
      [[ "\${#mpcArtist}" -gt "25" ]] && mpcArtist=\$(echo "\${mpcArtist:0:25}...")
      [[ "\${#mpcTitle}" -gt "25" ]] && mpcTitle=\$(echo "\${mpcTitle:0:25}...")
      [[ "\${#mpcAlbum}" -gt "25" ]] && mpcAlbum=\$(echo "\${mpcAlbum:0:25}...")
        notify-send --expire-time=\$expireTime -i "\${tmpCover}" "MPD Notification" "\`echo "<u>\${mpcTitle}</u>"; echo "By: <i>\${mpcArtist}</i>"; echo "From: <i>\${mpcAlbum}</i>"; echo "Length: <i>\${mpcLength}</i>"\`"
    else #if showCover is false
      notify-send --expire-time=\$expireTime "MPD Notification" "\`echo "<u>\${mpcTitle}</u>"; echo "By: <i>\${mpcArtist}</i>"; echo "From: <i>\${mpcAlbum}</i>"; echo "Length: <i>\${mpcLength}</i>"\`"
    fi
  fi
}

EOF

  exit 0

  fi

  . "$config"

  type -p handle_event || errorout 'handle_event() not defined, check your config'
}

# }}}

### start/stop deamon {{{
start_daemon() {
  [ -f "$pid" ] && errorout "file found at $pid, daemon already running?"

  # start listening in background
  ( while read -r; do
      handle_event
    done < <(mpc idleloop player) ) &

  echo $! > "$pid"
}

stop_daemon() {
  if [ -f "$pid" ]; then
    kill $(cat "$pid") || errorout 'error stopping daemon'

    rm "$pid"
  fi
}

# }}}

### constants

mydir="$XDG_CONFIG_HOME/mpdnotify/"

config="$mydir/config"

pid="$mydir/pid"

log="$mydir/log"

pipe="$mydir/pipe"

### run it

if [ ! -d "$mydir" ]; then
  mkdir -p "$mydir" || errorout "unable to create my dir $mydir"
fi

write_config

case "$1" in
  start)   start_daemon                       ;;
  stop)    stop_daemon                        ;;
  restart) stop_daemon; sleep 3; start_daemon ;;
  *)       message                            ;;
esac
